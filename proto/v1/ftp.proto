syntax = 'proto3';

package beget.ftp.v1.ftp;

import "ftp/proto/v1/structures.proto";
import "google/api/annotations.proto";

//Сервис для управления FTP-аккаунтами
//Все методы принимают JWT в заголовке "Authorization: Bearer {JWT}"
service FtpService {
    //Получение списка FTP-аккаунтов пользователя
    rpc findAll (FindAllRequest) returns (FindAllResponse) {
        option (google.api.http) = {
            get: "/v1/ftp/list/all"
        };
    }

    //Создание нового FTP-аккаунта
    rpc createAccount (CreateAccountRequest) returns (AddAccountResponse) {
        option (google.api.http) = {
            post: "/v1/ftp/create"
            body: "*"
        };
    }

    //Удаление FTP-аккаунта
    rpc deleteAccount (RemoveAccountRequest) returns (RemoveAccountResponse) {
        option (google.api.http) = {
            delete: "/v1/ftp/delete/{id}"
        };
    }

    //Изменение пароля FTP-аккаунта
    rpc changePassword (ChangePasswordRequest) returns (ChangePasswordResponse) {
        option (google.api.http) = {
            patch: "/v1/ftp/changePassword"
            body: "*"
        };
    }

    //Разрешает SSH-доступ для FTP-аккаунта
    rpc enableSsh (SetSshAccessEnabledRequest) returns (SetSshAccessEnabledResponse) {
        option (google.api.http) = {
            post: "/v1/ftp/enableSsh/{id}"
        };
    }

    //Отключает SSH-доступ для FTP-аккаунта
    rpc disableSsh (SetSshAccessDisabledRequest) returns (SetSshAccessDisabledResponse) {
        option (google.api.http) = {
            post: "/v1/ftp/disableSsh/{id}"
        };
    }
}

message FindAllRequest {
}

message FindAllResponse {
    repeated structures.FtpAccount ftp_account = 1;
}

message CreateAccountRequest {
    string suffix = 1;
    string password = 2;
    string path = 3;
}

message AddAccountResponse {
    oneof result {
        structures.FtpAccount ftp_account = 1;
        Error error = 2;
        PasswordError password_error = 3;
    }
}

message RemoveAccountRequest {
    oneof condition {
        uint32 id = 1;
        string suffix = 2;
    }
}

message RemoveAccountResponse {
    oneof result {
        Success success = 1;
        Error error = 2;
    }

    message Success {
    }
}

message ChangePasswordRequest {
    oneof condition {
        uint32 id = 1;
        string suffix = 2;
    }

    string password = 3;
}

message ChangePasswordResponse {
    oneof result {
        Success success = 1;
        PasswordError error = 2;
    }

    message Success {
    }
}

message SetSshAccessEnabledRequest {
    oneof condition {
        uint32 id = 1;
        string suffix = 2;
    }
}

message SetSshAccessDisabledRequest {
    oneof condition {
        uint32 id = 1;
        string suffix = 2;
    }
}

message SetSshAccessEnabledResponse {
    oneof result {
        structures.FtpAccount ftp_account = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            INTERNAL_ERROR = 0;
            UNAVAILABLE_FOR_FREE_HOSTING = 1;
        }
    }
}

message SetSshAccessDisabledResponse {
    oneof result {
        structures.FtpAccount ftp_account = 1;
        Error error = 2;
    }
}

message Error {
    enum Code {
        INTERNAL_ERROR = 0;
    }

    string message = 1;
}

message PasswordError {
    Code code = 1;
    string message = 2;

    enum Code {
        INTERNAL_ERROR = 0;
        TOO_SHORT_PASSWORD = 1;
        INCORRECT_PASSWORD = 2;
        TOO_WEAK_PASSWORD = 3;
    }
}
